from rest_framework import serializers, viewsetsfrom rest_framework import serializers, viewsetsfrom rest_framework import statusfrom rest_framework.response import Responseimport logginglog = logging.getLogger(__name__)from rest_framework import authentication, permissionsfrom django.shortcuts import get_object_or_404from catalogo.models.catalogo import Catalogoimport logginglog = logging.getLogger(__name__)class CatalogoSerializer(serializers.ModelSerializer):    class Meta:        model = Catalogo        fields = '__all__'class CatalogoGetSerializer(serializers.ModelSerializer):    cancha = serializers.SlugRelatedField(read_only=True, slug_field='nombre', )    implemento = serializers.SlugRelatedField(read_only=True, slug_field='nombre', )    local = serializers.SlugRelatedField(read_only=True, slug_field='nombre_local', )    class Meta:        model = Catalogo        fields = '__all__'# class CatalogoViewSet(viewsets.ModelViewSet):#    queryset = Catalogo.objects.all()#    serializer_class = CatalogoSerializerclass CatalogoViewSet(viewsets.ViewSet):    queryset = Catalogo.objects.all()    serializer_class = CatalogoSerializer    # permission_classes = [IsAuthenticated, TokenHasScope]    # required_scopes = ['acuerdo', ]    def list(self, request):        catalogo = Catalogo.objects.all()        serializer = CatalogoGetSerializer(catalogo, many=True, )        print(serializer)        return Response(serializer.data)    def retrieve(self, request, pk=None):        queryset = Catalogo.objects.all()        catalogo = get_object_or_404(queryset, pk=pk)        serializer = CatalogoSerializer(catalogo)        return Response(serializer.data)    def create(self, request):        serializer = CatalogoSerializer(data=request.data)        if serializer.is_valid():            serializer.save()            return Response(serializer.data, status=status.HTTP_201_CREATED)        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def update(self, request, pk=None):        queryset = Catalogo.objects.all()        catalogo = get_object_or_404(queryset, pk=pk)        serializer = CatalogoSerializer(catalogo, data=request.data)        if serializer.is_valid():            serializer.save()            return Response(serializer.data)        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def delete(self, request, pk=None):        queryset = Catalogo.objects.all()        catalogo = get_object_or_404(queryset, pk=pk)        catalogo.delete()        return Response(status=status.HTTP_204_NO_CONTENT)